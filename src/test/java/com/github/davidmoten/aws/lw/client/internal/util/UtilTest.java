package com.github.davidmoten.aws.lw.client.internal.util;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicBoolean;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import com.github.davidmoten.junit.Asserts;

public class UtilTest {
    
    @Test
    public void isUtilityClass() {
        Asserts.assertIsUtilityClass(Util.class);
    }

    @Test(expected = RuntimeException.class)
    public void testHash() {
        Util.hash("hi there".getBytes(StandardCharsets.UTF_8), "does not exist");
    }

    @Test(expected = RuntimeException.class)
    public void testToUrl() {
        Util.toUrl("bad");
    }

    @Test(expected = RuntimeException.class)
    public void testUrlEncode() {
        Util.urlEncode("abc://google.com", true, "does not exist");
    }

    @Test
    public void testCreateConnectionBad() throws IOException {
        Util.createHttpConnection(new URL("https://doesnotexist.never12345"), "GET",
                Collections.emptyMap(), 100, 100);
    }

    @Test
    public void testReadAndClose() {
        byte[] b = "hi there".getBytes(StandardCharsets.UTF_8);
        ByteArrayInputStream in = new ByteArrayInputStream(b);
        assertArrayEquals(b, Util.readBytesAndClose(in));
    }

    @Test
    public void testReadAndCloseReadThrows() {
        AtomicBoolean closed = new AtomicBoolean();
        InputStream in = new InputStream() {

            @Override
            public int read() throws IOException {
                throw new IOException("boo");
            }

            @Override
            public void close() {
                closed.set(true);
            }
        };
        try {
            Util.readBytesAndClose(in);
            Assert.fail();
        } catch (UncheckedIOException e) {
            // expected
            assertTrue(closed.get());
        }
    }

    @Test
    public void testReadAndCloseThrows() {
        InputStream in = new InputStream() {

            @Override
            public int read() throws IOException {
                return -1;
            }

            @Override
            public void close() throws IOException {
                throw new IOException("boo");
            }
        };
        try {
            Util.readBytesAndClose(in);
            Assert.fail();
        } catch (UncheckedIOException e) {
            // expected
        }
    }
    
    @Test
    public void testCanonicalMetadata() {
        assertEquals("abc123", Util.canonicalMetadataKey("abc123"));
    }
    
    @Test
    public void testCanonicalMetadataIgnoresDisallowedCharacters() {
        assertEquals("abc123", Util.canonicalMetadataKey("abc123@!"));
    }
    
    // json tests generated by chatgpt
    
    @Test
    public void testJsonFieldTextExtractStringField() {
        String json = "{\"name\":\"John\"}";
        assertEquals(Optional.of("John"), Util.jsonFieldText(json, "name"));
    }

    @Test
    public void testJsonFieldTextExtractStringFieldWithEscapedQuotes() {
        String json = "{\"name\":\"John \\\"Doe\\\"\"}";
        assertEquals(Optional.of("John \"Doe\""), Util.jsonFieldText(json, "name"));
    }

    @Test
    public void testJsonFieldTextExtractNonStringField() {
        String json = "{\"age\":30}";
        assertEquals(Optional.of("30"), Util.jsonFieldText(json, "age"));
    }

    @Test
    public void testJsonFieldTextExtractBooleanField() {
        String json = "{\"isActive\":true}";
        assertEquals(Optional.of("true"), Util.jsonFieldText(json, "isActive"));
    }

    @Test
    @Ignore // should return empty
    public void testJsonFieldTextExtractNullField() {
        String json = "{\"middleName\":null}";
        assertEquals(Optional.of("null"), Util.jsonFieldText(json, "middleName"));
    }

    @Test
    public void testJsonFieldTextFieldNotFound() {
        String json = "{\"name\":\"John\"}";
        assertEquals(Optional.empty(), Util.jsonFieldText(json, "age"));
    }

    @Test
    public void testJsonFieldTextEmptyJson() {
        String json = "{}";
        assertEquals(Optional.empty(), Util.jsonFieldText(json, "name"));
    }

    @Test
    public void testJsonFieldTextJsonWithWhitespace() {
        String json = "  { \"name\" : \"John\" , \"age\" : 30 }  ";
        assertEquals(Optional.of("John"), Util.jsonFieldText(json, "name"));
        assertEquals(Optional.of("30"), Util.jsonFieldText(json, "age"));
    }

    @Test
    public void testJsonFieldTextJsonWithExtraFields() {
        String json = "{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}";
        assertEquals(Optional.of("John"), Util.jsonFieldText(json, "name"));
        assertEquals(Optional.of("30"), Util.jsonFieldText(json, "age"));
        assertEquals(Optional.of("New York"), Util.jsonFieldText(json, "city"));
    }

    @Test
    public void testJsonFieldTextJsonWithNestedQuotesInStringField() {
        String json = "{\"quote\":\"\\\"To be or not to be\\\"\"}";
        assertEquals(Optional.of("\"To be or not to be\""), Util.jsonFieldText(json, "quote"));
    }

    @Test
    public void testJsonFieldTextJsonWithTrailingComma() {
        String json = "{\"name\":\"John\",}";
        assertEquals(Optional.of("John"), Util.jsonFieldText(json, "name"));
    }

    @Test
    public void testJsonFieldTextFieldWithSpecialCharacters() {
        String json = "{\"key-1\":\"value!@#$%^&*()\"}";
        assertEquals(Optional.of("value!@#$%^&*()"), Util.jsonFieldText(json, "key-1"));
    }

    @Test
    public void testJsonFieldTextMultipleFieldsWithSameName() {
        String json = "{\"name\":\"John\", \"other\":{\"name\":\"Doe\"}}";
        assertEquals(Optional.of("John"), Util.jsonFieldText(json, "name"));
    }

}
